From 31254762ecb2d48d15d6d4ef6e72f99ee66929f7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tomi=20Lepp=C3=A4nen?= <tomi.leppanen@jolla.com>
Date: Tue, 11 Aug 2020 16:02:48 +0300
Subject: [PATCH] Delay changes to ready state.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

From original commits by John Brooks <john.brooks@jollamobile.com>:
---
The ConnMan 'ready' state means that we should be online, but the online
check hasn't yet succeeded. 'online' means that the check has succeeded
and we are fully connected. The online check can be unreliable, so it's
important to allow connection in the ready state as well.

In cases where we switch between connectivity options, the state will
change from online -> ready -> online; in that case, we need to
reconnect IM accounts on the new default interface.

We now consider the network to be online when either 1) in the 'online'
state, or 2) after 10 seconds in the 'ready' state. This will trigger
reconnection for the case mentioned above while still being robust if
the online check has a false negative result.
---
To handle the case of transitioning between different connections, we
must disconnect immediately when entering the "ready" state and connect
again once we reach "online" (or the ready timeout expires).
---

The code is new but the idea is the same. This fixes problems with
disconnecting and reconnecting cellular data.

Signed-off-by: Tomi Lepp√§nen <tomi.leppanen@jolla.com>
---
 src/connman-network-monitor.c | 47 ++++++++++++++++++++++++++++++++---
 1 file changed, 44 insertions(+), 3 deletions(-)

diff --git a/src/connman-network-monitor.c b/src/connman-network-monitor.c
index 8ff5f62..fd96a56 100644
--- a/src/connman-network-monitor.c
+++ b/src/connman-network-monitor.c
@@ -28,6 +28,14 @@
 
 #include "connman-api.h"
 
+/* Number of seconds after which to treat a "ready" state as if the
+ * online check succeeded. This is needed because the online check may
+ * fail even when connectivity will be available shortly. In normal
+ * operation "ready" changes to "online" in 0.5 to 5 seconds and the
+ * callback doesn't fire.
+ */
+#define CONNMAN_READY_TIMEOUT_SEC 10
+
 static int priority = 90;
 static guint network_changed_signal = 0;
 
@@ -51,6 +59,7 @@ struct _GNetworkMonitorConnmanPrivate
 {
 	enum connman_state state;
 	struct connman_manager *manager;
+	guint ready_timer;
 };
 
 typedef struct _GNetworkMonitorConnman GNetworkMonitorConnman;
@@ -117,6 +126,10 @@ static void network_monitor_finalize(GObject *object)
 	connman_manager_cleanup(priv->manager);
 	priv->manager = NULL;
 	priv->state = STATE_UNKNOWN;
+	if (priv->ready_timer > 0) {
+		g_source_remove(priv->ready_timer);
+		priv->ready_timer = 0;
+	}
 
 	G_OBJECT_CLASS(g_network_monitor_connman_parent_class)->
 					finalize(object);
@@ -210,6 +223,19 @@ static enum connman_state string2state(const char *state)
 	return STATE_UNKNOWN;
 }
 
+static gboolean ready_timeout_cb(gpointer user_data)
+{
+	GNetworkMonitorConnman *monitor = user_data;
+	GNetworkMonitorConnmanPrivate *priv = g_network_monitor_connman_get_instance_private(monitor);
+	enum connman_state old_state = priv->state;
+	DBG("changing state to 'ready' after %d seconds of delay", CONNMAN_READY_TIMEOUT_SEC);
+	priv->state = STATE_READY;
+	if (is_available(old_state) != TRUE)
+		g_signal_emit(monitor, network_changed_signal, 0, get_state(monitor));
+	priv->ready_timer = 0;
+	return G_SOURCE_REMOVE;
+}
+
 static void property_changed(const char *property, void *value,
 							void *user_data)
 {
@@ -230,10 +256,25 @@ static void property_changed(const char *property, void *value,
 		DBG("property %s value \"%s\"", property, (char *)value);
 	}
 
-	if (is_available(new_state) != is_available(old_state)) {
-		priv->state = new_state;
-		g_signal_emit(monitor, network_changed_signal, 0,
+	if (new_state != old_state) {
+		if (priv->ready_timer > 0) {
+			DBG("clearing ready timer due to another state change");
+			g_source_remove(priv->ready_timer);
+			priv->ready_timer = 0;
+		}
+		if (new_state == STATE_READY) {
+			/* Delay state changes to 'ready' state */
+			priv->ready_timer = g_timeout_add_seconds(CONNMAN_READY_TIMEOUT_SEC,
+							ready_timeout_cb, monitor);
+			/* If old state was connected, we must disconnect temporarily */
+			if (old_state == STATE_ONLINE)
+				new_state = STATE_IDLE;
+		}
+		if (is_available(new_state) != is_available(old_state)) {
+			priv->state = new_state;
+			g_signal_emit(monitor, network_changed_signal, 0,
 							get_state(monitor));
+		}
 	}
 }
 
-- 
2.26.2

